/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1beta

import (
	v1beta "github.com/SunSince90/polycube-firewall-template/pkg/apis/polycubenetwork.com/v1beta"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// FirewallTemplateLister helps list FirewallTemplates.
type FirewallTemplateLister interface {
	// List lists all FirewallTemplates in the indexer.
	List(selector labels.Selector) (ret []*v1beta.FirewallTemplate, err error)
	// FirewallTemplates returns an object that can list and get FirewallTemplates.
	FirewallTemplates(namespace string) FirewallTemplateNamespaceLister
	FirewallTemplateListerExpansion
}

// firewallTemplateLister implements the FirewallTemplateLister interface.
type firewallTemplateLister struct {
	indexer cache.Indexer
}

// NewFirewallTemplateLister returns a new FirewallTemplateLister.
func NewFirewallTemplateLister(indexer cache.Indexer) FirewallTemplateLister {
	return &firewallTemplateLister{indexer: indexer}
}

// List lists all FirewallTemplates in the indexer.
func (s *firewallTemplateLister) List(selector labels.Selector) (ret []*v1beta.FirewallTemplate, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta.FirewallTemplate))
	})
	return ret, err
}

// FirewallTemplates returns an object that can list and get FirewallTemplates.
func (s *firewallTemplateLister) FirewallTemplates(namespace string) FirewallTemplateNamespaceLister {
	return firewallTemplateNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// FirewallTemplateNamespaceLister helps list and get FirewallTemplates.
type FirewallTemplateNamespaceLister interface {
	// List lists all FirewallTemplates in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1beta.FirewallTemplate, err error)
	// Get retrieves the FirewallTemplate from the indexer for a given namespace and name.
	Get(name string) (*v1beta.FirewallTemplate, error)
	FirewallTemplateNamespaceListerExpansion
}

// firewallTemplateNamespaceLister implements the FirewallTemplateNamespaceLister
// interface.
type firewallTemplateNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all FirewallTemplates in the indexer for a given namespace.
func (s firewallTemplateNamespaceLister) List(selector labels.Selector) (ret []*v1beta.FirewallTemplate, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta.FirewallTemplate))
	})
	return ret, err
}

// Get retrieves the FirewallTemplate from the indexer for a given namespace and name.
func (s firewallTemplateNamespaceLister) Get(name string) (*v1beta.FirewallTemplate, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta.Resource("firewalltemplate"), name)
	}
	return obj.(*v1beta.FirewallTemplate), nil
}
